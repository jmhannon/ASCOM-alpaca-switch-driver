
# -*- coding: utf-8 -*-
#
# -----------------------------------------------------------------------------
# switch.py - Alpaca API responders for Switch
#
# Author:   Jim Hannon
#
# -----------------------------------------------------------------------------
# Edit History:
#   Generated by Python Interface Generator for AlpycaDevice
#
# 

from falcon import Request, Response, HTTPBadRequest, before
from logging import Logger
from shr import PropertyResponse, MethodResponse, PreProcessRequest, \
                get_request_field, to_bool
from exceptions import *        # Nothing but exception classes
import requests
logger: Logger = None
from config import Config
import toml
from pyftdi.gpio import GpioController, GpioException

# ----------------------
# MULTI-INSTANCE SUPPORT
# ----------------------
# If this is > 0 then it means that multiple devices of this type are supported.
# Each responder on_get() and on_put() is called with a devnum parameter to indicate
# which instance of the device (0-based) is being called by the client. Leave this
# set to 0 for the simple case of controlling only one instance of this device type.
#
maxdev = 0         
Maxswitch  = 4            
sconnected = False
ip_list = [Config.s1_ip,Config.s2_ip,Config.s3_ip]
name_list = [Config.s1_name,Config.s2_name,Config.s3_name,Config.s4_name]
s4_url = Config.s4_url
# -----------
# DEVICE INFO
# -----------
# Static metadata not subject to configuration changes
class SwitchMetadata:
    """ Metadata describing the Switch Device. Edit for your device"""
    Name =  'Power Switch'
    Version = '001'
    Description = 'ASCOM Switch'
    DeviceType = 'Switch'
    DeviceID = "025f8ecd-5b88-429d-8943-a52dc187bea9" 
    Info = 'ASCOM driver to control tasmotized SONOFF smart switches and FTDI controlled relay'
    MaxDeviceNumber = maxdev
    InterfaceVersion = 1

# --------------------
# RESOURCE CONTROLLERS
# --------------------

@before(PreProcessRequest(maxdev))
class action:
    def on_put(self, req: Request, resp: Response, devnum: int):
        resp.text = MethodResponse(req, NotImplementedException()).json

@before(PreProcessRequest(maxdev))
class commandblind:
    def on_put(self, req: Request, resp: Response, devnum: int):
        resp.text = MethodResponse(req, NotImplementedException()).json

@before(PreProcessRequest(maxdev))
class commandbool:
    def on_put(self, req: Request, resp: Response, devnum: int):
        resp.text = MethodResponse(req, NotImplementedException()).json

@before(PreProcessRequest(maxdev))
class commandstring:
    def on_put(self, req: Request, resp: Response, devnum: int):
        resp.text = MethodResponse(req, NotImplementedException()).json

@before(PreProcessRequest(maxdev))
class connected:
    def on_get(self, req: Request, resp: Response, devnum: int):
            # -------------------------------
        is_conn = sconnected
            # -------------------------------
        resp.text = PropertyResponse(is_conn, req).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        conn_str = get_request_field('Connected', req)
        conn = to_bool(conn_str)              # Raises 400 Bad Request if str to bool fails
        try:
            global sconnected
            sconnected = conn
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req, DriverException(0x500, 'Switch.Connected failed', ex)).json

@before(PreProcessRequest(maxdev))
class description:
    def on_get(self, req: Request, resp: Response, devnum: int):
        resp.text = PropertyResponse(SwitchMetadata.Description, req).json

@before(PreProcessRequest(maxdev))
class driverinfo:
    def on_get(self, req: Request, resp: Response, devnum: int):
        resp.text = PropertyResponse(SwitchMetadata.Info, req).json

@before(PreProcessRequest(maxdev))
class interfaceversion:
    def on_get(self, req: Request, resp: Response, devnum: int):
        resp.text = PropertyResponse(SwitchMetadata.InterfaceVersion, req).json

@before(PreProcessRequest(maxdev))
class driverversion():
    def on_get(self, req: Request, resp: Response, devnum: int):
        resp.text = PropertyResponse(SwitchMetadata.Version, req).json

@before(PreProcessRequest(maxdev))
class name():
    def on_get(self, req: Request, resp: Response, devnum: int):
        resp.text = PropertyResponse(SwitchMetadata.Name, req).json

@before(PreProcessRequest(maxdev))
class supportedactions:
    def on_get(self, req: Request, resp: Response, devnum: int):
        resp.text = PropertyResponse([], req).json  # Not PropertyNotImplemented

@before(PreProcessRequest(maxdev))
class maxswitch:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not sconnected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = Maxswitch  # number of swithces in a device
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Switch.Maxswitch failed', ex)).json

@before(PreProcessRequest(maxdev))
class canwrite:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not sconnected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = True
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Switch.Canwrite failed', ex)).json

@before(PreProcessRequest(maxdev))
class getswitch:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not sconnected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        idstr = get_request_field('Id', req)
        try:
            id = int(idstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Id " + idstr + " not a valid number.')).json
            return
        try:
            ip = ip_list[id]
            url = 'http://'+ip+'/cm?cmnd=Power'
            response=requests.get(url)
            response_json = response.json()
            if (response_json['POWER'] == 'OFF'):
               val = False 
            elif (response_json['POWER'] == 'ON'):      
               val = True
            else:   
               raise Exception ('Invalid response to getswitch ')
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Switch.Getswitch failed', ex)).json

@before(PreProcessRequest(maxdev))
class getswitchdescription:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not sconnected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = 'Power Switch'
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Switch.Getswitchdescription failed', ex)).json

@before(PreProcessRequest(maxdev))
class getswitchname:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not sconnected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        idstr = get_request_field('Id', req)
        try:
            id = int(idstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Id " + idstr + " not a valid number.')).json
            return
        try:  
            name = name_list[id]    
            val = name
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Switch.Getswitchname failed', ex)).json

@before(PreProcessRequest(maxdev))
class getswitchvalue:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not sconnected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        idstr = get_request_field('Id', req)
        try:
            id = int(idstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Id " + idstr + " not a valid number.')).json
            return
        try:
            ip = ip_list[id]
            url = 'http://'+ip+'/cm?cmnd=Power'
            response=requests.get(url)
            response_json = response.json()
            if (response_json['POWER'] == 'OFF'):
               val = 0 
            elif (response_json['POWER'] == 'ON'):      
               val = 1
            else:   
               raise Exception ('Invalid response to getswitch ')
             ## GET PROPERTY ## off = 0  on = 1
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Switch.Getswitchvalue failed', ex)).json

@before(PreProcessRequest(maxdev))
class minswitchvalue:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not sconnected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = 0
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Switch.Minswitchvalue failed', ex)).json

@before(PreProcessRequest(maxdev))
class maxswitchvalue:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not sconnected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = 1
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Switch.Maxswitchvalue failed', ex)).json

@before(PreProcessRequest(maxdev))
class setswitch:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not sconnected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        idstr = get_request_field('Id', req)      # Raises 400 bad request if missing
        try:
            id = int(idstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Id " + idstr + " not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###          # Raise Alpaca InvalidValueException with details!
        statestr = get_request_field('State', req)      # Raises 400 bad request if missing
        state = to_bool(statestr)                       # Same here
        if (state == False):
          cmd = '%20Off'
        elif (state == True):
          cmd = '%20On'   
        try:
            ip = ip_list[id]
            url = 'http://'+ip+'/cm?cmnd=Power'+cmd
            response=requests.get(url)
            response_json = response.json()
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ### true or false
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Switch.Setswitch failed', ex)).json

@before(PreProcessRequest(maxdev))
class setswitchname:
     def on_put(self, req: Request, resp: Response, devnum: int):
        if not sconnected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        idstr = get_request_field('Id', req)      # Raises 400 bad request if missing
        try:
            id = int(idstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Id " + idstr + " not a valid number.')).json
            return
        if id not in range(Maxswitch):
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Id " + id + " not in range.')).json
            return
        namestr = get_request_field('Name', req)      # Raises 400 bad request if missing
        try:
            name_list[id] = namestr 
            # also write to config.toml
            # Load a TOML file
            with open('config.toml', 'r') as f:
               configf = toml.load(f)
            # Modify values in the config   
            configf['switch']['s'+idstr+'_name'] = namestr
            # Write the modified config back to the file
            with open('config.toml', 'w') as f:
               toml.dump(configf, f)
        except:
            resp.text = MethodResponse(req,
                           DriverException(f'Failed to save switch name in setswitchname')).json
            return

        try:
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ###
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Switch.Setswitchname failed', ex)).json


@before(PreProcessRequest(maxdev))
class setswitchvalue:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not sconnected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        idstr = get_request_field('Id', req)      # Raises 400 bad request if missing
        try:
            id = int(idstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Id " + idstr + " not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###          # Raise Alpaca InvalidValueException with details!
        valuestr = get_request_field('Value', req)      # Raises 400 bad request if missing
        try:
            value = float(valuestr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Value " + valuestr + " not a valid number.')).json
            return
        try:
            if (value == 0):
                cmd = '%20Off'
            elif (value == 1):
                cmd = '%20On'  
            else:
                resp.text = MethodResponse(req,
                            InvalidValueException(f'Value " + valuestr + " not a valid option.')).json
                return     
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Value " + valuestr + " not a valid option.')).json     
        ### RANGE CHECK AS NEEDED ###         # Raise Alpaca InvalidValueException with details!
        try:
            ip = ip_list[id]
            url = 'http://'+ip+'/cm?cmnd=Power'+cmd
            response=requests.get(url)
            response_json = response.json()
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Switch.Setswitchvalue failed', ex)).json

@before(PreProcessRequest(maxdev))
class switchstep:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not sconnected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = 1
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Switch.Switchstep failed', ex)).json

